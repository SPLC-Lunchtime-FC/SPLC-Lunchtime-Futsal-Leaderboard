<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SPLC Lunchtime Futsal Leaderboard</title>
<style>
  :root{
    --bg:#0b1220; --panel:#ffffff; --muted:#6b7280; --text:#0b1220;
    --black:#000; --white:#fff;
    --accent:#2563eb; --good:#10b981; --bad:#ef4444; --warn:#f59e0b;
    --radius:18px;
    --soft:#f3f4f6; --border:#e5e7eb;
  }
  *{box-sizing:border-box}
  html,body{margin:0;padding:0;background:var(--bg);color:var(--text);
    font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
    overflow-x:hidden;}
  .wrap{max-width:1100px;margin:0 auto;padding:18px}
  .card{background:var(--panel);border-radius:var(--radius);padding:14px 16px;box-shadow:0 6px 16px rgba(0,0,0,.15)}
  .row{display:grid;gap:14px}
  .cols-2{grid-template-columns:1fr 1fr}
  .cols-3{grid-template-columns:1fr 1fr 1fr}
  .flex{display:flex;gap:8px;align-items:center}
  .muted{color:var(--muted)}
  .right{margin-left:auto}
  .btn{appearance:none;border:1px solid var(--black);background:var(--black);color:var(--white);
    border-radius:10px;padding:8px 12px;cursor:pointer}
  .btn.ghost{background:var(--black);border-color:var(--black);color:var(--white)}
  .btn.blue{background:#0b4bcc;border-color:#0b4bcc}
  .btn.red{background:#b91c1c;border-color:#b91c1c}
  .btn.alt{background:#111827;border-color:#111827}
  input,select,textarea{padding:6px 10px;border:1px solid var(--border);border-radius:10px;background:#fff;font:inherit}
  input,select{height:36px}
  textarea{min-height:80px;resize:vertical}
  table{width:100%;border-collapse:separate;border-spacing:0 0}
  thead th{font-size:12px;color:#374151;font-weight:700;text-transform:uppercase;letter-spacing:.06em}
  th,td{padding:6px 6px;vertical-align:middle;text-align:left;white-space:nowrap}
  tbody tr{background:#fff;border-radius:12px;box-shadow:0 1px 0 rgba(0,0,0,.04)}
  tbody tr td:first-child{border-top-left-radius:12px;border-bottom-left-radius:12px}
  tbody tr td:last-child{border-top-right-radius:12px;border-bottom-right-radius:12px}
  .toolbar{display:flex;gap:6px;align-items:center;justify-content:flex-end}
  /* ultra-compact stat columns */
  .vcol{width:24px;text-align:center}
  .rankchg{font-size:12px}
  /* modals */
  .backdrop{position:fixed;inset:0;background:rgba(0,0,0,.4);display:none;align-items:center;justify-content:center;z-index:50;padding:16px}
  .modal{background:#fff;border-radius:18px;max-width:900px;width:min(900px, 95vw);padding:16px;box-shadow:0 20px 60px rgba(0,0,0,.35);overflow:hidden}
  .modal h3{margin:0 0 10px 0}
  #edit-stats, #view-stats{display:grid;grid-template-columns:repeat(5, minmax(0,1fr));gap:10px}
  #edit-stats label, #view-stats .box{display:flex;flex-direction:column;gap:4px;white-space:normal;word-break:break-word;background:var(--soft);border:1px solid var(--border);border-radius:10px;padding:8px}
  #edit-stats input{width:100%}
  .tiny{font-size:12px}
  .pill{display:inline-block;padding:2px 8px;border-radius:999px;background:#f3f4f6;border:1px solid #e5e7eb}
  .legend{display:grid;grid-template-columns:repeat(2, 1fr);gap:10px}
  .legend .item{background:var(--soft);border:1px solid var(--border);border-radius:10px;padding:8px;display:flex;justify-content:space-between;align-items:center}
  .grid2{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  .switch{position:relative;width:44px;height:24px;border-radius:999px;background:#e5e7eb;cursor:pointer}
  .switch input{display:none}
  .knob{position:absolute;top:3px;left:3px;width:18px;height:18px;background:#fff;border-radius:999px;transition:.2s}
  .switch input:checked + .knob{left:23px;background:#34d399}
  [data-editable-text].editing{outline:2px dashed #93c5fd;border-radius:6px}
  .hidden{display:none !important}
</style>
</head>
<body>
  <div class="wrap">
    <header class="flex" style="justify-content:space-between;align-items:flex-start">
      <div>
        <h1 data-editable-text="title" style="margin:4px 0 6px 0;color:#e6eefc">SPLC Lunchtime Futsal Leaderboard</h1>
        <div class="tiny muted" data-editable-text="subtitle">v3.7</div>
      </div>
      <div class="toolbar" id="toolbar-right">
        <button class="btn ghost" id="login-btn" data-action="admin-login">Admin Login</button>
        <div class="flex" id="quick-bar" style="display:none">
          <label class="flex tiny muted" style="gap:6px;align-items:center">
            <span>Edit text</span>
            <label class="switch"><input type="checkbox" id="toggle-edit-text"><span class="knob"></span></label>
          </label>
          <button class="btn blue" data-action="rank-update">Update Ranks</button>
          <button class="btn red" id="logout-btn" data-action="logout">Logout</button>
        </div>
      </div>
    </header>

    <div class="card" style="margin-top:12px">
      <div class="flex" style="gap:10px;flex-wrap:wrap;align-items:flex-end">
        <div class="flex" style="flex-direction:column">
          <label class="tiny muted" for="search">Search</label>
          <input id="search" placeholder="Search players" style="min-width:180px"/>
        </div>
        <div class="flex" style="flex-direction:column">
          <label class="tiny muted" for="role-tab">Position</label>
          <select id="role-tab">
            <option value="All">All</option><option value="Outfield">Outfield</option><option value="Keeper">Keeper</option>
          </select>
        </div>
        <div class="flex" style="flex-direction:column">
          <label class="tiny muted" for="sort-metric">Sort by</label>
          <select id="sort-metric">
            <option value="effect">Overall Effect (desc)</option>
            <option value="goals">Goals (desc)</option>
            <option value="assists">Assists (desc)</option>
            <option value="skill">Skill (A→C)</option>
          </select>
        </div>
        <div class="flex" style="flex-direction:column">
          <label class="tiny muted" for="division-filter">Division</label>
          <select id="division-filter">
            <option value="">All</option><option value="A">A</option><option value="B">B</option><option value="C">C</option>
          </select>
        </div>
        <div class="right"></div>
      </div>
    </div>

    <div class="card" style="margin-top:12px">
      <div class="flex" style="justify-content:space-between">
        <h3 style="margin:0" data-editable-text="of-title">Overall Leaderboard</h3>
        <span class="tiny muted">Click View to open a read‑only profile.</span>
      </div>
      <div style="overflow:auto hidden">
      <table id="lb">
        <thead>
          <tr>
            <th>Rank</th><th>Player</th><th>Role</th><th>Team</th><th>Skill</th>
            <th class="vcol" title="Goal">G</th>
            <th class="vcol" title="Assist">A</th>
            <th class="vcol" title="Easy Save">ES</th>
            <th class="vcol" title="Crazy Save">CS</th>
            <th class="vcol" title="Banger">B</th>
            <th class="vcol" title="Handball Intentional">HBI</th>
            <th class="vcol" title="Handball Unintentional">HBU</th>
            <th class="vcol" title="Over the fence">OTF</th>
            <th class="vcol" title="Over the bar">OTB</th>
            <th class="vcol" title="Error">E</th>
            <th>Overall</th><th>Actions</th>
          </tr>
        </thead>
        <tbody id="lb-body"></tbody>
      </table>
      </div>
    </div>

    <!-- Focus notes (admin writes, viewers read) -->
    <div class="card" id="focus-card" style="margin-top:12px">
      <div class="flex" style="justify-content:space-between;align-items:center">
        <h3 style="margin:0" data-editable-text="focus-title">Updates & Notes</h3>
        <div class="flex" style="gap:6px;align-items:center">
          <span class="tiny muted">Shown to everyone</span>
          <button class="btn" data-action="focus-edit" style="display:none;font-size:12px">Edit</button>
        </div>
      </div>
      <div id="focus-content" class="tiny" style="min-height:60px;background:var(--soft);border:1px solid var(--border);border-radius:10px;padding:10px">Add notes in admin mode.</div>
    </div>

    <!-- Hidden focus editor (admin only) -->
    <div class="card" id="focus-editor" style="margin-top:12px; display:none">
      <h3 style="margin:0 0 6px 0">Edit Updates</h3>
      <textarea id="focus-editor-text" style="width:100%;min-height:120px"></textarea>
      <div class="toolbar" style="justify-content:flex-end;margin-top:8px;gap:6px">
        <button class="btn blue" data-action="focus-save">Save</button>
        <button class="btn" data-action="focus-cancel">Cancel</button>
      </div>
    </div>

    <!-- Admin tools: Add Team / Add Player -->
    <div class="row cols-2" id="admin-add-cards" style="margin-top:12px; display:none">
      <div class="card" id="add-team-card">
        <div class="flex" style="justify-content:space-between;align-items:center;margin-bottom:8px">
          <h3 style="margin:0">Add Team</h3>
          <button class="btn" data-action="team-manage-toggle" style="font-size:12px;">Edit Teams</button>
        </div>
        <div class="flex" style="gap:6px">
          <input id="add-team-name" placeholder="Team name" style="flex:1"/>
          <button class="btn" data-action="team-add">Add</button>
        </div>
        <!-- Team manage list hidden by default -->
        <div id="team-manage" style="margin-top:10px;display:none"></div>
      </div>
      <div class="card" id="add-player-card">
        <h3 style="margin:0 0 8px 0">Add Player</h3>
        <div class="row" style="grid-template-columns:1fr 1fr 1fr 1fr auto">
          <input id="add-player-name" placeholder="Player name"/>
          <select id="add-player-role"><option value="Outfield">Outfield</option><option value="Keeper">Keeper</option></select>
          <select id="add-player-team"></select>
          <select id="add-player-skill"><option value="A">A</option><option value="B">B</option><option value="C">C</option></select>
          <button class="btn" data-action="player-add">Add Player</button>
        </div>
      </div>
    </div>

    <!-- Legend at bottom -->
    <div class="card" id="legend-card" style="margin-top:12px">
      <h3 style="margin:0 0 6px 0">Legend & Points</h3>
      <div class="legend">
        <div class="item"><span>G — Goal</span><span class="pill" id="w-goals"></span></div>
        <div class="item"><span>A — Assist</span><span class="pill" id="w-assists"></span></div>
        <div class="item"><span>ES — Easy Save</span><span class="pill" id="w-easySave"></span></div>
        <div class="item"><span>CS — Crazy Save</span><span class="pill" id="w-crazySave"></span></div>
        <div class="item"><span>B — Banger</span><span class="pill" id="w-banger"></span></div>
        <div class="item"><span>HBI — Handball (intentional)</span><span class="pill" id="w-handballIntent"></span></div>
        <div class="item"><span>HBU — Handball (unintentional)</span><span class="pill" id="w-handballUnintent"></span></div>
        <div class="item"><span>OTF — Over the fence</span><span class="pill" id="w-overFence"></span></div>
        <div class="item"><span>OTB — Over the bar</span><span class="pill" id="w-overBar"></span></div>
        <div class="item"><span>E — Error</span><span class="pill" id="w-error"></span></div>
      </div>
    </div>
  </div>

  <!-- Edit modal (admin only) -->
  <div class="backdrop" id="edit-backdrop">
    <div class="modal">
      <div class="flex" style="justify-content:space-between">
        <h3 style="margin:0">Edit Player</h3>
        <button class="btn" data-action="edit-close">✕</button>
      </div>
      <div class="grid2">
        <label>Name <input id="edit-name"/></label>
        <label>Role
          <select id="edit-role"><option>Outfield</option><option>Keeper</option></select>
        </label>
        <label>Team
          <select id="edit-team"></select>
        </label>
        <label>Skill
          <select id="edit-skill"><option>A</option><option>B</option><option>C</option></select>
        </label>
      </div>
      <h4>Stats</h4>
      <div id="edit-stats"></div>
      <div class="flex" style="justify-content:space-between;margin-top:10px">
        <div class="tiny muted">Overall Effect now: <b id="edit-effect">0</b></div>
        <div class="toolbar" style="gap:6px"><button class="btn blue" data-action="edit-save">Save</button><button class="btn" data-action="edit-close">Cancel</button><button class="btn red" data-action="player-delete">Delete</button></div>
      </div>
    </div>
  </div>

  <!-- View modal (viewer & admin read-only) -->
  <div class="backdrop" id="view-backdrop">
    <div class="modal">
      <div class="flex" style="justify-content:space-between">
        <h3 style="margin:0">Player Profile</h3>
        <button class="btn" data-action="view-close">✕</button>
      </div>
      <div id="view-body"></div>
    </div>
  </div>

  <!-- Login modal -->
  <div class="backdrop" id="login-backdrop">
    <div class="modal">
      <div class="flex" style="justify-content:space-between">
        <h3 style="margin:0">Admin Login</h3>
        <button class="btn" data-action="login-close">✕</button>
      </div>
      <div class="grid2">
        <label>Password <input id="login-pass" type="password" placeholder=""/></label>
        <div></div>
      </div>
      <div class="toolbar" style="justify-content:flex-end;margin-top:10px">
        <button class="btn blue" data-action="login-submit">Login</button>
      </div>
    </div>
  </div>

<script>
const ADMIN_PASSWORD = "buffevomegaknight"; // not stored; always required
const STORAGE_KEY = "splc_futsal_v37";

const DEFAULT_WEIGHTS = {
  goals:3, assists:3, easySave:2, crazySave:4,
  banger:4, handballIntent:-2, handballUnintent:-1, overFence:-3, overBar:-2, error:-2
};

let isAdmin = false; // do NOT persist admin session

let state = {
  players: [],
  teams: [],
  weights: {...DEFAULT_WEIGHTS},
  search:"",
  sortMetric:"effect",
  roleTab:"All",
  divisionFilter:"",
  rankPrev:{},
  rankChange:{},
  texts:{},
  focus:""
};

function save(){
  localStorage.setItem(STORAGE_KEY, JSON.stringify({
    players: state.players,
    teams: state.teams,
    weights: state.weights,
    rankPrev: state.rankPrev,
    rankChange: state.rankChange,
    texts: state.texts,
    focus: state.focus
  }));
}

(function load(){
  const raw = localStorage.getItem(STORAGE_KEY);
  if(raw){
    try{
      const d = JSON.parse(raw);
      state.players = d.players||state.players;
      state.weights = {...DEFAULT_WEIGHTS, ...(d.weights||{})};
      state.rankPrev = d.rankPrev||{};
      state.rankChange = d.rankChange||{};
      state.texts = d.texts||{};
      state.focus = d.focus||"";
      state.teams = d.teams || state.teams;
    }catch{}
  }
})();

function esc(s){ return (s??"").toString().replace(/[&<>]/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;"}[c])); }

function score(p){
  const s = p.stats||{};
  const w = state.weights;
  return (s.goals||0)*w.goals + (s.assists||0)*w.assists + (s.easySave||0)*w.easySave +
         (s.crazySave||0)*w.crazySave + (s.banger||0)*w.banger +
         (s.handballIntent||0)*w.handballIntent + (s.handballUnintent||0)*w.handballUnintent +
         (s.overFence||0)*w.overFence + (s.overBar||0)*w.overBar + (s.error||0)*w.error;
}

function sortedPlayers(){
  let arr = state.players.map(p=>({...p, effect:score(p)}));
  if(state.roleTab !== "All") arr = arr.filter(p=>p.role === state.roleTab);
  if(state.divisionFilter){
    arr = arr.filter(p => (p.skill || "A") === state.divisionFilter);
  }
  if(state.search.trim()){
    const q = state.search.trim().toLowerCase();
    arr = arr.filter(p=>p.personName.toLowerCase().includes(q));
  }
  const key = state.sortMetric;
  if(key==="skill"){
    const pri = {A:3,B:2,C:1};
    arr.sort((a,b)=> (pri[(a.skill||"A")]||0) - (pri[(b.skill||"A")]||0) ).reverse(); // A first
  }else{
    arr.sort((a,b)=> (b[key]??0) - (a[key]??0));
  }
  return arr;
}

function computeRankMap(){
  // Compute global ranking across all players without search/role/division filters
  const arr = state.players.map(p=>({
    ...p,
    effect: score(p)
  }));
  const key = state.sortMetric;
  if(key === "skill"){
    const pri = {A:3,B:2,C:1};
    arr.sort((a,b)=> (pri[(b.skill||"A")]||0) - (pri[(a.skill||"A")]||0));
  }else{
    arr.sort((a,b)=> ((b[key]??0) - (a[key]??0)));
  }
  const map = {};
  arr.forEach((p,i) => { map[p.id] = i + 1; });
  return map;
}

function updateRankMovements(){
  const map = computeRankMap();
  const diff = {};
  for(const id in map){
    const prev = state.rankPrev[id] || map[id];
    diff[id] = prev - map[id];
  }
  state.rankChange = diff;
  state.rankPrev = map;
  save();
  render();
}

function renderLegend(){
  for(const k of ["goals","assists","easySave","crazySave","banger","handballIntent","handballUnintent","overFence","overBar","error"]){
    const el = document.getElementById("w-"+k);
    if(!el) continue;
    if(isAdmin){
      // show input for weight editing
      const val = state.weights[k] ?? 0;
      el.innerHTML = `<input type="number" data-weight-key="${k}" value="${val}" style="width:50px"/>`;
    } else {
      const val = state.weights[k] ?? 0;
      el.textContent = val > 0 ? "+"+val : val;
    }
  }
}

// Render team manage list (rename/delete) inside Add Team card
function renderTeamManage(){
  const container = document.getElementById("team-manage");
  if(!container) return;
  if(!state.teams || state.teams.length===0){
    container.innerHTML = `<div class="tiny muted">No teams yet.</div>`;
    return;
  }
  container.innerHTML = state.teams.map((t,i)=>{
    return `<div class="flex" style="gap:6px;margin-bottom:6px" data-team-index="${i}">
      <input data-team-name="${i}" value="${esc(t)}" style="flex:1;height:28px;padding:4px 8px;border:1px solid var(--border);border-radius:6px"/>
      <button class="btn" data-action="team-rename" data-index="${i}">Rename</button>
      <button class="btn red" data-action="team-delete" data-index="${i}">Delete</button>
    </div>`;
  }).join("");
}

// Populate team selects for add/edit player
function renderTeamOptions(){
  const opts = ['<option value="">N/A</option>']
    .concat(state.teams.map(t=>`<option>${esc(t)}</option>`))
    .join('');
  const addSel = document.getElementById("add-player-team");
  if(addSel) addSel.innerHTML = opts;
  const editSel = document.getElementById("edit-team");
  if(editSel) editSel.innerHTML = opts;
}

function renderTable(){
  const rows = sortedPlayers();
  const body = document.getElementById("lb-body");
  if(rows.length===0){ body.innerHTML = `<tr><td colspan="18" class="tiny muted">No players yet.</td></tr>`; return; }
  const rankMap = computeRankMap();
  body.innerHTML = rows.map((p,i)=>{
    const st = p.stats||{};
    const rk = rankMap[p.id] || (i+1);
    const delta = state.rankChange[p.id]||0;
    const arrow = delta>0?`<span class="rankchg" style="color:#059669">▲${delta}</span>`: (delta<0?`<span class="rankchg" style="color:#dc2626">▼${Math.abs(delta)}</span>`:`<span class="rankchg muted">–</span>`);
    return `<tr>
      <td>${rk} ${arrow}</td>
      <td><b>${esc(p.personName)}</b></td>
      <td>${esc(p.role||"")}</td>
      <td>${esc(p.team||"N/A")}</td>
      <td>${esc(p.skill||"A")}</td>
      <td class="vcol">${st.goals||0}</td>
      <td class="vcol">${st.assists||0}</td>
      <td class="vcol">${st.easySave||0}</td>
      <td class="vcol">${st.crazySave||0}</td>
      <td class="vcol">${st.banger||0}</td>
      <td class="vcol">${st.handballIntent||0}</td>
      <td class="vcol">${st.handballUnintent||0}</td>
      <td class="vcol">${st.overFence||0}</td>
      <td class="vcol">${st.overBar||0}</td>
      <td class="vcol">${st.error||0}</td>
      <td><b>${score(p)}</b></td>
      <td>
        <div class="toolbar">
          ${isAdmin
            ? `<button class="btn alt" data-action="edit" data-id="${p.id}">Edit</button>`
            : `<button class="btn alt" data-action="view-player" data-id="${p.id}">View</button>`}
        </div>
      </td>
    </tr>`;
  }).join("");
}

function updateAdminUI(){
  document.getElementById("quick-bar").style.display = isAdmin?"flex":"none";
  document.getElementById("admin-add-cards").style.display = isAdmin?"grid":"none";
  document.getElementById("login-btn").classList.toggle("hidden", isAdmin);
  document.getElementById("logout-btn").classList.toggle("hidden", !isAdmin);
  // Editable text blocks
  document.querySelectorAll("[data-editable-text]").forEach(el=>{
    if(isAdmin && document.getElementById("toggle-edit-text").checked){
      el.contentEditable = "true"; el.classList.add("editing");
    }else{ el.contentEditable = "false"; el.classList.remove("editing"); }
  });

  // Show focus edit button only for admin
  const focusBtn = document.querySelector('#focus-card button[data-action="focus-edit"]');
  if(focusBtn) focusBtn.style.display = isAdmin ? 'inline-flex' : 'none';
  const focusEditor = document.getElementById('focus-editor');
  if(focusEditor && !isAdmin){
    focusEditor.style.display = 'none';
  }
}

function applyTextValues(){
  const map = state.texts||{};
  for(const key in map){
    const el = document.querySelector(`[data-editable-text="${CSS.escape(key)}"]`);
    if(el) el.textContent = map[key];
  }
  if(state.focus) document.getElementById("focus-content").innerHTML = state.focus;
}

function render(){
  renderLegend();
  renderTable();
  renderTeamManage();
  renderTeamOptions();
  updateAdminUI();
  applyTextValues();
}

// seed demo content if empty (remove later if not needed)
if(state.players.length===0){
  state.players = [
    {id:"p1", personName:"Eli", role:"Outfield", team:"N/A", skill:"A", stats:{goals:32,crazySave:1}},
    {id:"p2", personName:"Josh", role:"Keeper", team:"N/A", skill:"A", stats:{goals:4,assists:4}},
    {id:"p3", personName:"Pod", role:"Outfield", team:"N/A", skill:"A", stats:{goals:23,assists:0}},
  ];
  // initialize teams list based on seeded players (ignoring N/A)
  const setT = new Set();
  state.players.forEach(p=>{ if(p.team && p.team !== "N/A") setT.add(p.team); });
  state.teams = Array.from(setT);
  save();
}

render();

// handlers
document.addEventListener("input", (e)=>{
  if(e.target.id==="search"){ state.search = e.target.value; render(); }
  if(e.target.id==="sort-metric"){ state.sortMetric = e.target.value; render(); }
  if(e.target.id==="role-tab"){ state.roleTab = e.target.value; render(); }
  if(e.target.id==="division-filter"){ state.divisionFilter = e.target.value; render(); }
  if(e.target.id==="toggle-edit-text"){
    if(isAdmin){
      updateAdminUI();
    }else{
      e.target.checked=false;
    }
  }

  // Weight editing for admin
  if(e.target.hasAttribute("data-weight-key")){
    const key = e.target.getAttribute("data-weight-key");
    const val = parseInt(e.target.value||"0",10) || 0;
    state.weights[key] = val;
    save();
    // immediately re-render to update effects
    render();
    return;
  }
});

// Clicks
document.addEventListener("click", (e)=>{
  const a = e.target.closest("[data-action]"); if(!a) return;
  const act = a.getAttribute("data-action");

  if(act==="admin-login"){ document.getElementById("login-backdrop").style.display="flex"; return; }
  if(act==="login-close"){ document.getElementById("login-backdrop").style.display="none"; return; }
  if(act==="login-submit"){
    const pass = (document.getElementById("login-pass").value||"").trim();
    if(pass===ADMIN_PASSWORD){
      isAdmin = true; document.getElementById("login-backdrop").style.display="none"; render();
      // Wipe the password field so nothing is remembered
      document.getElementById("login-pass").value = "";
    } else { alert("Wrong password"); }
    return;
  }
  if(act==="logout"){ isAdmin=false; render(); return; }
  if(act === "rank-update"){ updateRankMovements(); return; }

  if(act === "team-manage-toggle"){
    const container = document.getElementById('team-manage');
    if(container){
      if(container.style.display === 'none' || container.style.display === ''){
        container.style.display = 'block';
        renderTeamManage();
      } else {
        container.style.display = 'none';
      }
    }
    return;
  }

  if(act === "team-add"){
    const input = document.getElementById("add-team-name");
    const name = (input.value||"").trim();
    if(!name){ alert("Enter a team name"); return; }
    if(state.teams.includes(name)){
      alert("Team already exists");
    } else {
      state.teams.push(name);
      save();
      // update dropdowns and manage list but don't auto-open manage section
      renderTeamOptions();
    }
    input.value="";
    return;
  }

  if(act === "player-add"){
    const name = (document.getElementById("add-player-name").value||"").trim();
    if(!name){ alert("Enter player name"); return; }
    const role = document.getElementById("add-player-role").value;
    const teamSel = document.getElementById("add-player-team");
    const team = (teamSel && teamSel.value) || "";
    const skill = document.getElementById("add-player-skill").value;
    const id = "p"+Math.random().toString(36).slice(2,9);
    state.players.push({id, personName:name, role, team: team || "N/A", skill, stats:{}});
    save(); render();
    document.getElementById("add-player-name").value="";
    if(teamSel) teamSel.value="";
    return;
  }

  if(act==="edit"){
    const id = a.getAttribute("data-id");
    openEdit(id);
    return;
  }
  if(act==="edit-close"){ document.getElementById("edit-backdrop").style.display="none"; return; }
  if(act==="edit-save"){ saveEdit(); return; }

  // Team rename/delete (admin)
  if(act === "team-rename"){
    const idx = parseInt(a.getAttribute("data-index"),10);
    const input = document.querySelector(`input[data-team-name="${idx}"]`);
    if(!input) return;
    const newName = input.value.trim();
    if(!newName){ alert("Team name cannot be empty"); return; }
    const oldName = state.teams[idx];
    if(state.teams.includes(newName) && newName !== oldName){ alert("Another team already has this name"); return; }
    state.teams[idx] = newName;
    // update players that use this team
    state.players.forEach(p => { if(p.team === oldName) p.team = newName; });
    save();
    renderTeamManage();
    renderTeamOptions();
    renderTable();
    return;
  }
  if(act === "team-delete"){
    const idx = parseInt(a.getAttribute("data-index"),10);
    const name = state.teams[idx];
    if(!confirm(`Delete team "${name}"? Players on this team will be set to N/A.`)) return;
    state.teams.splice(idx,1);
    state.players.forEach(p => { if(p.team === name) p.team = "N/A"; });
    save();
    renderTeamManage();
    renderTeamOptions();
    renderTable();
    return;
  }

  if(act==="view-player"){
    const id = a.getAttribute("data-id");
    openView(id);
    return;
  }
  if(act==="view-close"){ document.getElementById("view-backdrop").style.display="none"; return; }

  if(act === "player-delete"){
    if(!isAdmin) return;
    if(!currentEditId) return;
    const idx = state.players.findIndex(p => p.id === currentEditId);
    if(idx >= 0){
      if(confirm("Delete this player?")){
        state.players.splice(idx,1);
        save();
        document.getElementById("edit-backdrop").style.display = "none";
        render();
      }
    }
    return;
  }

  // Focus edit actions
  if(act === "focus-edit"){
    // Show focus editor card and populate textarea
    const editor = document.getElementById("focus-editor");
    const textarea = document.getElementById("focus-editor-text");
    const html = state.focus || document.getElementById("focus-content").innerHTML;
    textarea.value = html.replace(/<br\s*\/?>/gi, "\n");
    editor.style.display = "block";
    return;
  }
  if(act === "focus-save"){
    const textarea = document.getElementById("focus-editor-text");
    const text = textarea.value.trim();
    state.focus = text.replace(/\n/g, "<br>");
    save();
    document.getElementById("focus-editor").style.display = "none";
    render();
    return;
  }
  if(act === "focus-cancel"){
    document.getElementById("focus-editor").style.display = "none";
    return;
  }
});

let currentEditId=null;
function openEdit(id){
  if(!isAdmin) return;
  currentEditId = id;
  const p = state.players.find(x=>x.id===id); if(!p) return;
  document.getElementById("edit-name").value = p.personName||"";
  document.getElementById("edit-role").value = p.role||"Outfield";
  // ensure team options up to date
  renderTeamOptions();
  const teamSel = document.getElementById("edit-team");
  if(teamSel){
    teamSel.value = (p.team && p.team !== "N/A") ? p.team : "";
  }
  document.getElementById("edit-skill").value = p.skill||"A";
  const KEYS = ["goals","assists","easySave","crazySave","banger","handballIntent","handballUnintent","overFence","overBar","error"];
  document.getElementById("edit-stats").innerHTML = KEYS.map(k=>`
    <label class="tiny">${k.replace(/([A-Z])/g," $1").trim()}<input type="number" data-edit-stat="${k}" value="${p.stats?.[k]||0}"/></label>
  `).join("");
  document.getElementById("edit-effect").textContent = score(p);
  document.getElementById("edit-backdrop").style.display="flex";
  document.getElementById("edit-backdrop").querySelector(".modal").scrollTop=0;
  document.getElementById("edit-backdrop").querySelector(".modal").style.overflow="hidden";
}

function saveEdit(){
  const id = currentEditId;
  const p = state.players.find(x=>x.id===id); if(!p) return;
  p.personName = document.getElementById("edit-name").value.trim();
  p.role = document.getElementById("edit-role").value;
  const teamSel = document.getElementById("edit-team");
  const teamVal = (teamSel && teamSel.value) || "";
  p.team = teamVal || "N/A";
  p.skill = document.getElementById("edit-skill").value;
  const inputs = document.querySelectorAll("[data-edit-stat]");
  p.stats = p.stats||{};
  inputs.forEach(inp => { p.stats[inp.getAttribute("data-edit-stat")] = parseInt(inp.value||"0",10)||0; });
  save();
  document.getElementById("edit-backdrop").style.display="none";
  render();
}

function openView(id){
  const p = state.players.find(x=>x.id===id); if(!p) return;
  const st = p.stats||{};
  const KEYS = [
    ["goals","Goal"],["assists","Assist"],["easySave","Easy Save"],["crazySave","Crazy Save"],["banger","Banger"],
    ["handballIntent","Handball Intentional"],["handballUnintent","Handball Unintentional"],
    ["overFence","Over the fence"],["overBar","Over the bar"],["error","Error"]
  ];
  const body = document.getElementById("view-body");
  body.innerHTML = `
    <div class="grid2">
      <div><div class="tiny muted">Name</div><div class="pill">${esc(p.personName)}</div></div>
      <div><div class="tiny muted">Role</div><div class="pill">${esc(p.role||"")}</div></div>
      <div><div class="tiny muted">Team</div><div class="pill">${esc(p.team||"N/A")}</div></div>
      <div><div class="tiny muted">Skill</div><div class="pill">${esc(p.skill||"A")}</div></div>
    </div>
    <h4>Stats</h4>
    <div id="view-stats">
      ${KEYS.map(([k,label])=>`
        <div class="box">
          <div class="tiny muted">${label}</div>
          <div style="font-weight:700;font-size:16px">${st[k]||0}</div>
        </div>
      `).join("")}
    </div>
    <div class="flex" style="justify-content:flex-end;margin-top:10px">
      <div class="tiny muted">Overall Effect: <b>${score(p)}</b></div>
    </div>
  `;
  document.getElementById("view-backdrop").style.display="flex";
}

// simple text edit persistence
document.addEventListener("blur", (e)=>{
  const el = e.target;
  if(el.matches("[data-editable-text]") && el.isContentEditable){
    const key = el.getAttribute("data-editable-text");
    state.texts[key] = el.textContent;
    save();
  }
}, true);
</script>
</body>
</html>
